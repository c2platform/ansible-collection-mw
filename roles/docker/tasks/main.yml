---
- name: Set Docker facts
  set_fact:
    docker_networks: "{{ lookup('vars', docker_role_name+'_docker_networks', default=[]) }}"
    docker_images: "{{ lookup('vars', docker_role_name+'_docker_images', default=[]) }}"
    docker_containers: "{{ lookup('vars', docker_role_name+'_docker_containers', default=[]) }}"
    docker_volumes: "{{ lookup('vars', docker_role_name+'_docker_volumes', default=[]) }}"
    docker_composes: "{{ lookup('vars', docker_role_name+'_docker_composes', default=[]) }}"
    docker_cp: "{{ lookup('vars', docker_role_name+'_docker_cp', default=[]) }}"
  when: docker_role_name is defined

- name: Networks
  community.docker.docker_network:
    name: "{{ item['name'] }}"
    connected: "{{ item['connected']|default(omit) }}"
    appends: "{{ item['appends']|default(omit) }}"
    ipam_config: "{{ item['ipam_config']|default(omit) }}"
    labels: "{{ item['labels']|default(omit) }}"
    force: "{{ item['force']|default(omit) }}"
    state: "{{ item['state']|default(omit) }}"
  with_items: "{{ docker_networks }}"
  loop_control:
    label: "{{ item['name'] }}"
  notify: "{{ item['notify']|default(omit) }}"
  when: docker_networks is defined

- name: Images
  community.docker.docker_image:
    name: "{{ item['name'] }}"
    source: "{{ item['source']|default('pull') }}"
    pull: "{{ item['pull']|default(omit) }}"
    push: "{{ item['push']|default(omit) }}"
    repository: "{{ item['repository']|default(omit) }}"
    tag: "{{ item['tag']|default(omit) }}"
    force_tag: "{{ item['force_tag']|default(omit) }}"
    build: "{{ item['build']|default(omit) }}"
    archive_path: "{{ item['archive_path']|default(omit) }}"
    load_path: "{{ item['load_path']|default(omit) }}"
    state: "{{ item['state']|default(omit) }}"
  with_items: "{{ docker_images }}"
  loop_control:
    label: "{{ item['name'] }}"
  notify: "{{ item['notify']|default(omit) }}"
  when: docker_images is defined

- name: Volumes
  community.docker.docker_volume:
    name: "{{ item['name'] }}"
    docker_host: "{{ item['docker_host']|default(omit) }}"
    driver: "{{ item['driver']|default(omit) }}"
    force: "{{ item['force']|default(omit) }}"
    labels: "{{ item['labels']|default(omit) }}"
    timeout: "{{ item['timeout']|default(omit) }}"
    driver_options: "{{ item['driver_options']|default(omit) }}"
    state: "{{ item['state']|default(omit) }}"
  with_items: "{{ docker_volumes }}"
  loop_control:
    label: "{{ item['name'] }}"
  notify: "{{ item['notify']|default(omit) }}"
  when: docker_volumes is defined

- name: Container
  community.docker.docker_container:
    name: "{{ item['name'] }}"
    image: "{{ item['image'] }}"
    volumes: "{{ item['volumes']|default(omit) }}"
    command: "{{ item['command']|default(omit) }}"
    exposed_ports: "{{ item['exposed_ports']|default(omit) }}"
    volumes_from: "{{ item['volumes_from']|default(omit) }}"
    links: "{{ item['links']|default(omit) }}"
    devices: "{{ item['devices']|default(omit) }}"
    ports: "{{ item['ports']|default(omit) }}"
    env: "{{ item['env']|default(omit) }}"
    etc_hosts: "{{ item['etc_hosts']|default(omit) }}"
    log_driver: "{{ item['log_driver']|default(omit) }}"
    log_options: "{{ item['log_options']|default(omit) }}"
    networks: "{{ item['networks']|default(omit) }}"
    purge_networks: "{{ item['purge_networks']|default(omit) }}"
    recreate: "{{ item['recreate']|default(omit) }}"
    restart_policy: "{{ item['restart_policy']|default(omit) }}"
    state: "{{ item['state']|default(omit) }}"
  with_items: "{{ docker_containers }}"
  loop_control:
    label: "{{ item['name'] }}"
  notify: "{{ item['notify']|default(omit) }}"
  when: docker_containers is defined

- name: Compose
  community.docker.docker_compose:
    project_name: "{{ item['project_name']|default(omit) }}"
    definition: "{{ item['definition']|default(omit) }}"
    project_src: "{{ item['project_src']|default(omit) }}"
    restarted: "{{ item['restarted']|default(omit) }}"
    scale: "{{ item['scale']|default(omit) }}"
    build: "{{ item['build']|default(omit) }}"
    stopped: "{{ item['stopped']|default(omit) }}"
    state: "{{ item['state']|default('present') }}"
  with_items: "{{ docker_composes }}"
  loop_control:
    label: "{{ item['project_name'] }}"
  notify: "{{ item['notify']|default(omit) }}"
  when: docker_composes is defined

- name: Copy  # noqa command-instead-of-shell
  shell: "docker cp {{ item }}"
  with_items: "{{ docker_cp }}"
  when: docker_cp is defined
  changed_when: false  # TODO

- include: proxy_for_containers.yml
  when: docker_proxy_http is defined and docker_proxy_users is defined

- name: Docker service
  file:
    path: "/etc/systemd/system/docker.service.d"
    state: directory
    mode: 0755
  when: docker_proxy_http is defined

- name: Proxy config Docker service
  template:
    dest: "/etc/systemd/system/docker.service.d/http-proxy.conf"
    src: http-proxy.conf.j2
    mode: 0644
  when: docker_proxy_http is defined
  notify:
    - systemctl-daemon-reload
    - restart docker
